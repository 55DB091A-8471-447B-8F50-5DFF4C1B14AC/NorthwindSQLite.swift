{"interfaceLanguages":{"swift":[{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/init(productid:productname:supplierid:categoryid:quantityperunit:unitprice:unitsinstock:unitsonorder:reorderlevel:discontinued:categoryname:)","title":"init(productID: Int?, productName: String?, supplierID: Int?, categoryID: Int?, quantityPerUnit: String?, unitPrice: String?, unitsInStock: Int?, unitsOnOrder: Int?, reorderLevel: Int?, discontinued: String?, categoryName: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/categoryid","title":"var categoryID: Int?","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/categoryname","title":"var categoryName: String?","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/discontinued","title":"var discontinued: String?","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/productid","title":"var productID: Int?","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/productname","title":"var productName: String?","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/quantityperunit","title":"var quantityPerUnit: String?","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/reorderlevel","title":"var reorderLevel: Int?","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/supplierid","title":"var supplierID: Int?","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/unitprice","title":"var unitPrice: String?","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/unitsinstock","title":"var unitsInStock: Int?","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/unitsonorder","title":"var unitsOnOrder: Int?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.type.property","title":"static let schema: AlphabeticalListOfProduct.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/alphabeticallistofproduct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/categoryid","title":"let categoryID: MappedColumn<AlphabeticalListOfProduct, Int?>","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/categoryname","title":"let categoryName: MappedColumn<AlphabeticalListOfProduct, String?>","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/discontinued","title":"let discontinued: MappedColumn<AlphabeticalListOfProduct, String?>","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/productid","title":"let productID: MappedColumn<AlphabeticalListOfProduct, Int?>","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/productname","title":"let productName: MappedColumn<AlphabeticalListOfProduct, String?>","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/quantityperunit","title":"let quantityPerUnit: MappedColumn<AlphabeticalListOfProduct, String?>","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/reorderlevel","title":"let reorderLevel: MappedColumn<AlphabeticalListOfProduct, Int?>","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/supplierid","title":"let supplierID: MappedColumn<AlphabeticalListOfProduct, Int?>","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/unitprice","title":"let unitPrice: MappedColumn<AlphabeticalListOfProduct, String?>","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/unitsinstock","title":"let unitsInStock: MappedColumn<AlphabeticalListOfProduct, Int?>","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/unitsonorder","title":"let unitsOnOrder: MappedColumn<AlphabeticalListOfProduct, Int?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/matchclosuretype","title":"AlphabeticalListOfProduct.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/propertyindices","title":"AlphabeticalListOfProduct.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/recordtype","title":"AlphabeticalListOfProduct.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: AlphabeticalListOfProduct.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> AlphabeticalListOfProduct.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/alphabeticallistofproduct\/schema-swift.struct","title":"AlphabeticalListOfProduct.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/init(_:indices:)","title":"init(OpaquePointer!, indices: AlphabeticalListOfProduct.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/alphabeticallistofproduct\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: AlphabeticalListOfProduct.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/alphabeticallistofproduct\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/alphabeticallistofproduct","title":"AlphabeticalListOfProduct","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/category\/init(id:categoryname:description:picture:)","title":"init(id: Int?, categoryName: String?, description: String?, picture: [UInt8]?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/categoryname","title":"var categoryName: String?","type":"property"},{"path":"\/documentation\/northwind\/category\/description","title":"var description: String?","type":"property"},{"path":"\/documentation\/northwind\/category\/id-366k8","title":"var id: Int?","type":"property"},{"path":"\/documentation\/northwind\/category\/picture","title":"var picture: [UInt8]?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/schema-swift.type.property","title":"static let schema: Category.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/category\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/id-74xdk","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/northwind\/category\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/id-3j3ht","title":"var id: Self.ID","type":"property"}],"path":"\/documentation\/northwind\/category\/sqlkeyedtablerecord-implementations","title":"SQLKeyedTableRecord Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/categoryname","title":"let categoryName: MappedColumn<Category, String?>","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/description","title":"let description: MappedColumn<Category, String?>","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/id","title":"let id: MappedColumn<Category, Int?>","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/picture","title":"let picture: MappedColumn<Category, [UInt8]?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/matchclosuretype","title":"Category.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/propertyindices","title":"Category.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/recordtype","title":"Category.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/delete","title":"static let delete: String","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/deleteparameterindices","title":"static let deleteParameterIndices: Category.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/insert","title":"static let insert: String","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/insertparameterindices","title":"static let insertParameterIndices: Category.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/insertreturning","title":"static let insertReturning: String","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/primarykeycolumn","title":"static let primaryKeyColumn: MappedColumn<Category, Int?>","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: Category.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/update","title":"static let update: String","type":"property"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/updateparameterindices","title":"static let updateParameterIndices: Category.Schema.PropertyIndices","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> Category.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/==(_:_:)","title":"static func == (Self, Self.PrimaryKeyColumn.Value?) -> SQLColumnValuePredicate<Self.PrimaryKeyColumn>","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/in(_:)","title":"func `in`(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/northwind\/category\/schema-swift.struct\/notin(_:)","title":"func notIn(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"}],"path":"\/documentation\/northwind\/category\/schema-swift.struct\/sqlkeyedtableschema-implementations","title":"SQLKeyedTableSchema Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/category\/schema-swift.struct","title":"Category.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/init(_:indices:)","title":"init(OpaquePointer!, indices: Category.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: Category.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/category\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/category\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/northwind\/category\/sqltablerecord-implementations","title":"SQLTableRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/category","title":"Category","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/init(categoryname:categorysales:)","title":"init(categoryName: String?, categorySales: String?)","type":"init"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/categoryname","title":"var categoryName: String?","type":"property"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/categorysales","title":"var categorySales: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.type.property","title":"static let schema: CategorySalesFor1997.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/categorysalesfor1997\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/categoryname","title":"let categoryName: MappedColumn<CategorySalesFor1997, String?>","type":"property"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/categorysales","title":"let categorySales: MappedColumn<CategorySalesFor1997, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/matchclosuretype","title":"CategorySalesFor1997.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/propertyindices","title":"CategorySalesFor1997.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/recordtype","title":"CategorySalesFor1997.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: CategorySalesFor1997.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> CategorySalesFor1997.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/categorysalesfor1997\/schema-swift.struct","title":"CategorySalesFor1997.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/init(_:indices:)","title":"init(OpaquePointer!, indices: CategorySalesFor1997.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/categorysalesfor1997\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: CategorySalesFor1997.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/categorysalesfor1997\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/categorysalesfor1997","title":"CategorySalesFor1997","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/currentproductlist\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/currentproductlist\/init(productid:productname:)","title":"init(productID: Int?, productName: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/currentproductlist\/productid","title":"var productID: Int?","type":"property"},{"path":"\/documentation\/northwind\/currentproductlist\/productname","title":"var productName: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.type.property","title":"static let schema: CurrentProductList.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/currentproductlist\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/currentproductlist\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/productid","title":"let productID: MappedColumn<CurrentProductList, Int?>","type":"property"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/productname","title":"let productName: MappedColumn<CurrentProductList, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/matchclosuretype","title":"CurrentProductList.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/propertyindices","title":"CurrentProductList.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/recordtype","title":"CurrentProductList.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: CurrentProductList.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> CurrentProductList.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/currentproductlist\/schema-swift.struct","title":"CurrentProductList.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/currentproductlist\/init(_:indices:)","title":"init(OpaquePointer!, indices: CurrentProductList.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/currentproductlist\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: CurrentProductList.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/currentproductlist\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/currentproductlist","title":"CurrentProductList","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/customer\/init(id:companyname:contactname:contacttitle:address:city:region:postalcode:country:phone:fax:)","title":"init(id: String?, companyName: String?, contactName: String?, contactTitle: String?, address: String?, city: String?, region: String?, postalCode: String?, country: String?, phone: String?, fax: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/address","title":"var address: String?","type":"property"},{"path":"\/documentation\/northwind\/customer\/city","title":"var city: String?","type":"property"},{"path":"\/documentation\/northwind\/customer\/companyname","title":"var companyName: String?","type":"property"},{"path":"\/documentation\/northwind\/customer\/contactname","title":"var contactName: String?","type":"property"},{"path":"\/documentation\/northwind\/customer\/contacttitle","title":"var contactTitle: String?","type":"property"},{"path":"\/documentation\/northwind\/customer\/country","title":"var country: String?","type":"property"},{"path":"\/documentation\/northwind\/customer\/fax","title":"var fax: String?","type":"property"},{"path":"\/documentation\/northwind\/customer\/id-7y8o7","title":"var id: String?","type":"property"},{"path":"\/documentation\/northwind\/customer\/phone","title":"var phone: String?","type":"property"},{"path":"\/documentation\/northwind\/customer\/postalcode","title":"var postalCode: String?","type":"property"},{"path":"\/documentation\/northwind\/customer\/region","title":"var region: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/schema-swift.type.property","title":"static let schema: Customer.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/customer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/id-4xjcg","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/northwind\/customer\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/id-58jdy","title":"var id: Self.ID","type":"property"}],"path":"\/documentation\/northwind\/customer\/sqlkeyedtablerecord-implementations","title":"SQLKeyedTableRecord Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/address","title":"let address: MappedColumn<Customer, String?>","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/city","title":"let city: MappedColumn<Customer, String?>","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/companyname","title":"let companyName: MappedColumn<Customer, String?>","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/contactname","title":"let contactName: MappedColumn<Customer, String?>","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/contacttitle","title":"let contactTitle: MappedColumn<Customer, String?>","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/country","title":"let country: MappedColumn<Customer, String?>","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/fax","title":"let fax: MappedColumn<Customer, String?>","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/id","title":"let id: MappedColumn<Customer, String?>","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/phone","title":"let phone: MappedColumn<Customer, String?>","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/postalcode","title":"let postalCode: MappedColumn<Customer, String?>","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/region","title":"let region: MappedColumn<Customer, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/matchclosuretype","title":"Customer.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/propertyindices","title":"Customer.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/recordtype","title":"Customer.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/delete","title":"static let delete: String","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/deleteparameterindices","title":"static let deleteParameterIndices: Customer.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/insert","title":"static let insert: String","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/insertparameterindices","title":"static let insertParameterIndices: Customer.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/insertreturning","title":"static let insertReturning: String","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/primarykeycolumn","title":"static let primaryKeyColumn: MappedColumn<Customer, String?>","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: Customer.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/update","title":"static let update: String","type":"property"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/updateparameterindices","title":"static let updateParameterIndices: Customer.Schema.PropertyIndices","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> Customer.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/==(_:_:)","title":"static func == (Self, Self.PrimaryKeyColumn.Value?) -> SQLColumnValuePredicate<Self.PrimaryKeyColumn>","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/in(_:)","title":"func `in`(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/notin(_:)","title":"func notIn(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"}],"path":"\/documentation\/northwind\/customer\/schema-swift.struct\/sqlkeyedtableschema-implementations","title":"SQLKeyedTableSchema Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/customer\/schema-swift.struct","title":"Customer.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/init(_:indices:)","title":"init(OpaquePointer!, indices: Customer.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: Customer.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/customer\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/customer\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/northwind\/customer\/sqltablerecord-implementations","title":"SQLTableRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/customer","title":"Customer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/init(city:companyname:contactname:relationship:)","title":"init(city: String?, companyName: String?, contactName: String?, relationship: String?)","type":"init"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/city","title":"var city: String?","type":"property"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/companyname","title":"var companyName: String?","type":"property"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/contactname","title":"var contactName: String?","type":"property"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/relationship","title":"var relationship: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.type.property","title":"static let schema: CustomerAndSuppliersByCity.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/customerandsuppliersbycity\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/city","title":"let city: MappedColumn<CustomerAndSuppliersByCity, String?>","type":"property"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/companyname","title":"let companyName: MappedColumn<CustomerAndSuppliersByCity, String?>","type":"property"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/contactname","title":"let contactName: MappedColumn<CustomerAndSuppliersByCity, String?>","type":"property"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/relationship","title":"let relationship: MappedColumn<CustomerAndSuppliersByCity, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/matchclosuretype","title":"CustomerAndSuppliersByCity.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/propertyindices","title":"CustomerAndSuppliersByCity.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/recordtype","title":"CustomerAndSuppliersByCity.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: CustomerAndSuppliersByCity.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> CustomerAndSuppliersByCity.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/customerandsuppliersbycity\/schema-swift.struct","title":"CustomerAndSuppliersByCity.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/init(_:indices:)","title":"init(OpaquePointer!, indices: CustomerAndSuppliersByCity.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerandsuppliersbycity\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: CustomerAndSuppliersByCity.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/customerandsuppliersbycity\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/customerandsuppliersbycity","title":"CustomerAndSuppliersByCity","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/id-swift.struct\/init(_:_:)","title":"init(String, String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/id-swift.struct\/customerid","title":"let customerID: String","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/id-swift.struct\/customertypeid","title":"let customerTypeID: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/id-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/customercustomerdemo\/id-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/customercustomerdemo\/id-swift.struct","title":"CustomerCustomerDemo.ID","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/init(customerid:customertypeid:)","title":"init(customerID: String, customerTypeID: String)","type":"init"},{"path":"\/documentation\/northwind\/customercustomerdemo\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/customerid","title":"var customerID: String","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/customertypeid","title":"var customerTypeID: String","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/id-swift.property-2sayp","title":"var id: CustomerCustomerDemo.ID","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.type.property","title":"static let schema: CustomerCustomerDemo.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/customercustomerdemo\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/id-swift.property-2bkkv","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/northwind\/customercustomerdemo\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/customerid","title":"let customerID: MappedForeignKey<CustomerCustomerDemo, String, MappedColumn<Customer, String?>>","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/customertypeid","title":"let customerTypeID: MappedForeignKey<CustomerCustomerDemo, String, MappedColumn<CustomerDemographic, String>>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/matchclosuretype","title":"CustomerCustomerDemo.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/propertyindices","title":"CustomerCustomerDemo.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/recordtype","title":"CustomerCustomerDemo.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/delete","title":"static let delete: String","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/deleteparameterindices","title":"static let deleteParameterIndices: CustomerCustomerDemo.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/insert","title":"static let insert: String","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/insertparameterindices","title":"static let insertParameterIndices: CustomerCustomerDemo.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/insertreturning","title":"static let insertReturning: String","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: CustomerCustomerDemo.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> CustomerCustomerDemo.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/customercustomerdemo\/schema-swift.struct","title":"CustomerCustomerDemo.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/init(_:indices:)","title":"init(OpaquePointer!, indices: CustomerCustomerDemo.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: CustomerCustomerDemo.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/customercustomerdemo\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/customercustomerdemo\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/northwind\/customercustomerdemo\/sqltablerecord-implementations","title":"SQLTableRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/customercustomerdemo","title":"CustomerCustomerDemo","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/customerdemographic\/init(id:customerdesc:)","title":"init(id: String, customerDesc: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/customerdesc","title":"var customerDesc: String?","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/id-3ndu5","title":"var id: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.type.property","title":"static let schema: CustomerDemographic.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/customerdemographic\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/id-3vbzi","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/northwind\/customerdemographic\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/id-822qs","title":"var id: Self.ID","type":"property"}],"path":"\/documentation\/northwind\/customerdemographic\/sqlkeyedtablerecord-implementations","title":"SQLKeyedTableRecord Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/customerdesc","title":"let customerDesc: MappedColumn<CustomerDemographic, String?>","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/id","title":"let id: MappedColumn<CustomerDemographic, String>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/matchclosuretype","title":"CustomerDemographic.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/propertyindices","title":"CustomerDemographic.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/recordtype","title":"CustomerDemographic.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/delete","title":"static let delete: String","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/deleteparameterindices","title":"static let deleteParameterIndices: CustomerDemographic.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/insert","title":"static let insert: String","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/insertparameterindices","title":"static let insertParameterIndices: CustomerDemographic.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/insertreturning","title":"static let insertReturning: String","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/primarykeycolumn","title":"static let primaryKeyColumn: MappedColumn<CustomerDemographic, String>","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: CustomerDemographic.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/update","title":"static let update: String","type":"property"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/updateparameterindices","title":"static let updateParameterIndices: CustomerDemographic.Schema.PropertyIndices","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> CustomerDemographic.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/==(_:_:)","title":"static func == (Self, Self.PrimaryKeyColumn.Value?) -> SQLColumnValuePredicate<Self.PrimaryKeyColumn>","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/in(_:)","title":"func `in`(ClosedRange<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueRangePredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/notin(_:)","title":"func notIn(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"}],"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct\/sqlkeyedtableschema-implementations","title":"SQLKeyedTableSchema Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/customerdemographic\/schema-swift.struct","title":"CustomerDemographic.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/init(_:indices:)","title":"init(OpaquePointer!, indices: CustomerDemographic.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: CustomerDemographic.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/customerdemographic\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/customerdemographic\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/northwind\/customerdemographic\/sqltablerecord-implementations","title":"SQLTableRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/customerdemographic","title":"CustomerDemographic","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/employee\/init(id:lastname:firstname:title:titleofcourtesy:birthdate:hiredate:address:city:region:postalcode:country:homephone:extension:photo:notes:reportsto:photopath:)","title":"init(id: Int?, lastName: String?, firstName: String?, title: String?, titleOfCourtesy: String?, birthDate: String?, hireDate: String?, address: String?, city: String?, region: String?, postalCode: String?, country: String?, homePhone: String?, extension: String?, photo: [UInt8]?, notes: String?, reportsTo: Int?, photoPath: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/address","title":"var address: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/birthdate","title":"var birthDate: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/city","title":"var city: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/country","title":"var country: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/extension","title":"var `extension`: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/firstname","title":"var firstName: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/hiredate","title":"var hireDate: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/homephone","title":"var homePhone: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/id-9uc9c","title":"var id: Int?","type":"property"},{"path":"\/documentation\/northwind\/employee\/lastname","title":"var lastName: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/notes","title":"var notes: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/photo","title":"var photo: [UInt8]?","type":"property"},{"path":"\/documentation\/northwind\/employee\/photopath","title":"var photoPath: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/postalcode","title":"var postalCode: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/region","title":"var region: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/reportsto","title":"var reportsTo: Int?","type":"property"},{"path":"\/documentation\/northwind\/employee\/title","title":"var title: String?","type":"property"},{"path":"\/documentation\/northwind\/employee\/titleofcourtesy","title":"var titleOfCourtesy: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/schema-swift.type.property","title":"static let schema: Employee.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/employee\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/id-nub3","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/northwind\/employee\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/id-4d7iu","title":"var id: Self.ID","type":"property"}],"path":"\/documentation\/northwind\/employee\/sqlkeyedtablerecord-implementations","title":"SQLKeyedTableRecord Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/address","title":"let address: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/birthdate","title":"let birthDate: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/city","title":"let city: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/country","title":"let country: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/extension","title":"let `extension`: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/firstname","title":"let firstName: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/hiredate","title":"let hireDate: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/homephone","title":"let homePhone: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/id","title":"let id: MappedColumn<Employee, Int?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/lastname","title":"let lastName: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/notes","title":"let notes: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/photo","title":"let photo: MappedColumn<Employee, [UInt8]?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/photopath","title":"let photoPath: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/postalcode","title":"let postalCode: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/region","title":"let region: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/reportsto","title":"let reportsTo: MappedForeignKey<Employee, Int?, MappedColumn<Employee, Int?>>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/title","title":"let title: MappedColumn<Employee, String?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/titleofcourtesy","title":"let titleOfCourtesy: MappedColumn<Employee, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/matchclosuretype","title":"Employee.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/propertyindices","title":"Employee.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/recordtype","title":"Employee.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/delete","title":"static let delete: String","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/deleteparameterindices","title":"static let deleteParameterIndices: Employee.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/insert","title":"static let insert: String","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/insertparameterindices","title":"static let insertParameterIndices: Employee.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/insertreturning","title":"static let insertReturning: String","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/primarykeycolumn","title":"static let primaryKeyColumn: MappedColumn<Employee, Int?>","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: Employee.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/update","title":"static let update: String","type":"property"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/updateparameterindices","title":"static let updateParameterIndices: Employee.Schema.PropertyIndices","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> Employee.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/==(_:_:)","title":"static func == (Self, Self.PrimaryKeyColumn.Value?) -> SQLColumnValuePredicate<Self.PrimaryKeyColumn>","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/in(_:)","title":"func `in`(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/notin(_:)","title":"func notIn(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"}],"path":"\/documentation\/northwind\/employee\/schema-swift.struct\/sqlkeyedtableschema-implementations","title":"SQLKeyedTableSchema Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/employee\/schema-swift.struct","title":"Employee.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/init(_:indices:)","title":"init(OpaquePointer!, indices: Employee.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: Employee.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/employee\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/employee\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/northwind\/employee\/sqltablerecord-implementations","title":"SQLTableRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/employee","title":"Employee","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/id-swift.struct\/init(_:_:)","title":"init(Int, String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/id-swift.struct\/employeeid","title":"let employeeID: Int","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/id-swift.struct\/territoryid","title":"let territoryID: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/id-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/employeeterritory\/id-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/employeeterritory\/id-swift.struct","title":"EmployeeTerritory.ID","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/init(employeeid:territoryid:)","title":"init(employeeID: Int, territoryID: String)","type":"init"},{"path":"\/documentation\/northwind\/employeeterritory\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/employeeid","title":"var employeeID: Int","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/id-swift.property-7p9mp","title":"var id: EmployeeTerritory.ID","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/territoryid","title":"var territoryID: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.type.property","title":"static let schema: EmployeeTerritory.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/employeeterritory\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/id-swift.property-8pcqn","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/northwind\/employeeterritory\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/employeeid","title":"let employeeID: MappedForeignKey<EmployeeTerritory, Int, MappedColumn<Employee, Int?>>","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/territoryid","title":"let territoryID: MappedForeignKey<EmployeeTerritory, String, MappedColumn<Territory, String>>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/matchclosuretype","title":"EmployeeTerritory.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/propertyindices","title":"EmployeeTerritory.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/recordtype","title":"EmployeeTerritory.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/delete","title":"static let delete: String","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/deleteparameterindices","title":"static let deleteParameterIndices: EmployeeTerritory.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/insert","title":"static let insert: String","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/insertparameterindices","title":"static let insertParameterIndices: EmployeeTerritory.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/insertreturning","title":"static let insertReturning: String","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: EmployeeTerritory.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> EmployeeTerritory.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/employeeterritory\/schema-swift.struct","title":"EmployeeTerritory.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/init(_:indices:)","title":"init(OpaquePointer!, indices: EmployeeTerritory.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: EmployeeTerritory.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/employeeterritory\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/employeeterritory\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/northwind\/employeeterritory\/sqltablerecord-implementations","title":"SQLTableRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/employeeterritory","title":"EmployeeTerritory","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/invoice\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/invoice\/init(shipname:shipaddress:shipcity:shipregion:shippostalcode:shipcountry:customerid:customername:address:city:region:postalcode:country:salesperson:orderid:orderdate:requireddate:shippeddate:shippername:productid:productname:unitprice:quant-42s24","title":"init(shipName: String?, shipAddress: String?, shipCity: String?, shipRegion: String?, shipPostalCode: String?, shipCountry: String?, customerID: String?, customerName: String?, address: String?, city: String?, region: String?, postalCode: String?, country: String?, salesperson: String?, orderID: Int?, orderDate: Date?, requiredDate: Date?, shippedDate: Date?, shipperName: String?, productID: Int?, productName: String?, unitPrice: String?, quantity: Int?, discount: Double?, extendedPrice: String?, freight: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/invoice\/address","title":"var address: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/city","title":"var city: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/country","title":"var country: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/customerid","title":"var customerID: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/customername","title":"var customerName: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/discount","title":"var discount: Double?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/extendedprice","title":"var extendedPrice: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/freight","title":"var freight: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/orderdate","title":"var orderDate: Date?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/orderid","title":"var orderID: Int?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/postalcode","title":"var postalCode: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/productid","title":"var productID: Int?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/productname","title":"var productName: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/quantity","title":"var quantity: Int?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/region","title":"var region: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/requireddate","title":"var requiredDate: Date?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/salesperson","title":"var salesperson: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/shipaddress","title":"var shipAddress: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/shipcity","title":"var shipCity: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/shipcountry","title":"var shipCountry: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/shipname","title":"var shipName: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/shippostalcode","title":"var shipPostalCode: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/shipregion","title":"var shipRegion: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/shippeddate","title":"var shippedDate: Date?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/shippername","title":"var shipperName: String?","type":"property"},{"path":"\/documentation\/northwind\/invoice\/unitprice","title":"var unitPrice: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.type.property","title":"static let schema: Invoice.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/invoice\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/invoice\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/address","title":"let address: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/city","title":"let city: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/country","title":"let country: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/customerid","title":"let customerID: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/customername","title":"let customerName: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/discount","title":"let discount: MappedColumn<Invoice, Double?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/extendedprice","title":"let extendedPrice: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/freight","title":"let freight: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/orderdate","title":"let orderDate: MappedColumn<Invoice, Date?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/orderid","title":"let orderID: MappedColumn<Invoice, Int?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/postalcode","title":"let postalCode: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/productid","title":"let productID: MappedColumn<Invoice, Int?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/productname","title":"let productName: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/quantity","title":"let quantity: MappedColumn<Invoice, Int?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/region","title":"let region: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/requireddate","title":"let requiredDate: MappedColumn<Invoice, Date?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/salesperson","title":"let salesperson: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/shipaddress","title":"let shipAddress: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/shipcity","title":"let shipCity: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/shipcountry","title":"let shipCountry: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/shipname","title":"let shipName: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/shippostalcode","title":"let shipPostalCode: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/shipregion","title":"let shipRegion: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/shippeddate","title":"let shippedDate: MappedColumn<Invoice, Date?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/shippername","title":"let shipperName: MappedColumn<Invoice, String?>","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/unitprice","title":"let unitPrice: MappedColumn<Invoice, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/matchclosuretype","title":"Invoice.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/propertyindices","title":"Invoice.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/recordtype","title":"Invoice.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: Invoice.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> Invoice.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/invoice\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/invoice\/schema-swift.struct","title":"Invoice.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/invoice\/init(_:indices:)","title":"init(OpaquePointer!, indices: Invoice.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/invoice\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: Invoice.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/invoice\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/invoice","title":"Invoice","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/alphabeticallistofproducts","title":"let alphabeticalListOfProducts: AlphabeticalListOfProduct.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/categories","title":"let categories: Category.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/categorysalesfor1997s","title":"let categorySalesFor1997s: CategorySalesFor1997.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/currentproductlists","title":"let currentProductLists: CurrentProductList.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/customerandsuppliersbycities","title":"let customerAndSuppliersByCities: CustomerAndSuppliersByCity.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/customercustomerdemos","title":"let customerCustomerDemos: CustomerCustomerDemo.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/customerdemographics","title":"let customerDemographics: CustomerDemographic.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/customers","title":"let customers: Customer.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/employeeterritories","title":"let employeeTerritories: EmployeeTerritory.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/employees","title":"let employees: Employee.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/invoices","title":"let invoices: Invoice.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/orderdetails","title":"let orderDetails: OrderDetail.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/orderdetailsextendeds","title":"let orderDetailsExtendeds: OrderDetailsExtended.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/ordersubtotals","title":"let orderSubtotals: OrderSubtotal.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/orders","title":"let orders: Order.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/ordersqries","title":"let ordersQries: OrdersQry.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/productdetailsvs","title":"let productDetailsVs: ProductDetailsV.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/productsalesfor1997s","title":"let productSalesFor1997s: ProductSalesFor1997.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/products","title":"let products: Product.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/productsaboveaverageprices","title":"let productsAboveAveragePrices: ProductsAboveAveragePrice.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/productsbycategories","title":"let productsByCategories: ProductsByCategory.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/quarterlyorders","title":"let quarterlyOrders: QuarterlyOrder.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/regions","title":"let regions: Region.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/salesbycategories","title":"let salesByCategories: SalesByCategory.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/salestotalsbyamounts","title":"let salesTotalsByAmounts: SalesTotalsByAmount.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/shippers","title":"let shippers: Shipper.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/summaryofsalesbyquarters","title":"let summaryOfSalesByQuarters: SummaryOfSalesByQuarter.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/summaryofsalesbyyears","title":"let summaryOfSalesByYears: SummaryOfSalesByYear.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/suppliers","title":"let suppliers: Supplier.Type","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct\/territories","title":"let territories: Territory.Type","type":"property"}],"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.struct","title":"Northwind.RecordTypes","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/init(connectionhandler:)","title":"init(connectionHandler: SQLConnectionHandler)","type":"init"},{"path":"\/documentation\/northwind\/northwind\/init(url:readonly:)","title":"init(url: URL, readOnly: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/connectionhandler","title":"var connectionHandler: SQLConnectionHandler","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/creationsql","title":"static var creationSQL: String","type":"property"},{"path":"\/documentation\/northwind\/northwind\/dateformatter","title":"static var dateFormatter: DateFormatter?","type":"property"},{"path":"\/documentation\/northwind\/northwind\/module","title":"static let module: Northwind!","type":"property"},{"path":"\/documentation\/northwind\/northwind\/recordtypes-swift.type.property","title":"static let recordTypes: Northwind.RecordTypes","type":"property"},{"path":"\/documentation\/northwind\/northwind\/useinsertreturning","title":"static var useInsertReturning: Bool","type":"property"},{"path":"\/documentation\/northwind\/northwind\/userversion","title":"static var userVersion: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/withoptblob(_:_:)","title":"static func withOptBlob<R>([UInt8]?, (UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"},{"path":"\/documentation\/northwind\/northwind\/withoptcstring(_:_:)","title":"static func withOptCString<R>(String?, (UnsafePointer<CChar>?) throws -> R) rethrows -> R","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/readtransaction(execute:)-3jguj","title":"func readTransaction<R>(execute: (SQLTransaction<Self>) throws -> R) async throws -> R","type":"method"},{"path":"\/documentation\/northwind\/northwind\/readtransaction(execute:)-6l07b","title":"func readTransaction<R>(execute: (SQLTransaction<Self>) throws -> R) throws -> R","type":"method"},{"path":"\/documentation\/northwind\/northwind\/transaction(mode:execute:)-673x7","title":"func transaction<R>(mode: SQLTransactionType, execute: (SQLChangeTransaction<Self>) throws -> R) throws -> R","type":"method"},{"path":"\/documentation\/northwind\/northwind\/transaction(mode:execute:)-7phk8","title":"func transaction<R>(mode: SQLTransactionType, execute: (SQLChangeTransaction<Self>) throws -> R) async throws -> R","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/create(at:readonly:)-2a82h","title":"static func create(at: URL, readOnly: Bool) async throws -> Self","type":"method"},{"path":"\/documentation\/northwind\/northwind\/create(at:readonly:)-zajp","title":"static func create(at: URL, readOnly: Bool) throws -> Self","type":"method"},{"path":"\/documentation\/northwind\/northwind\/create(at:readonly:copying:)-7wto6","title":"static func create(at: URL, readOnly: Bool, copying: URL) async throws -> Self","type":"method"},{"path":"\/documentation\/northwind\/northwind\/create(at:readonly:copying:)-8go2a","title":"static func create(at: URL, readOnly: Bool, copying: URL) throws -> Self","type":"method"}],"path":"\/documentation\/northwind\/northwind\/sqldatabase-implementations","title":"SQLDatabase Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/delete(_:)-7l3cs","title":"func delete<T>(T) async throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/delete(from:id:)-38t82","title":"func delete<T>(from: KeyPath<Self.RecordTypes, T.Type>, id: T.Schema.PrimaryKeyColumn.Value) async throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/delete(from:where:)-5z7dy","title":"func delete<T, P>(from: KeyPath<Self.RecordTypes, T.Type>, where: (T.Schema) -> P) async throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/delete(from:where:is:)-1i5xb","title":"func delete<T, C>(from: KeyPath<Self.RecordTypes, T.Type>, where: KeyPath<T.Schema, C>, is: C.Value) async throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/insert(_:)-4fy5h","title":"func insert<T>(T) async throws -> T","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:)-88of7","title":"func update<T>(T) async throws","type":"method"}],"path":"\/documentation\/northwind\/northwind\/sqldatabaseasyncchangeoperations-implementations","title":"SQLDatabaseAsyncChangeOperations Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:)-6o6vr","title":"func select<T, C>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, Int?) async throws -> [C.Value]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:)-evvj","title":"func select<T, C1, C2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, Int?) async throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:)-9skj2","title":"func select<T, C1, C2, C3>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:)-7u44h","title":"func select<T, C1, C2, C3, C4>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:)-um04","title":"func select<T, C1, C2, C3, C4, C5>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:_:)-6i3ks","title":"func select<T, C1, C2, C3, C4, C5, C6>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:_:where:)-5yt24","title":"func select<T, C1, C2, C3, C4, C5, C6, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:orderby:_:_:)-3tnir","title":"func select<T, C1, C2, C3, C4, C5, C6, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:orderby:_:_:_:_:)-1nqjx","title":"func select<T, C1, C2, C3, C4, C5, C6, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:orderby:_:_:_:_:where:)-7xpp7","title":"func select<T, C1, C2, C3, C4, C5, C6, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:orderby:_:_:where:)-941yd","title":"func select<T, C1, C2, C3, C4, C5, C6, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:where:)-1zuxj","title":"func select<T, C1, C2, C3, C4, C5, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:orderby:_:_:)-7e283","title":"func select<T, C1, C2, C3, C4, C5, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:orderby:_:_:_:_:)-5kq28","title":"func select<T, C1, C2, C3, C4, C5, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:orderby:_:_:_:_:where:)-3392l","title":"func select<T, C1, C2, C3, C4, C5, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:orderby:_:_:where:)-4dtuj","title":"func select<T, C1, C2, C3, C4, C5, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:where:)-78aiy","title":"func select<T, C1, C2, C3, C4, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:orderby:_:_:)-2xml1","title":"func select<T, C1, C2, C3, C4, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:orderby:_:_:_:_:)-1mxif","title":"func select<T, C1, C2, C3, C4, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:orderby:_:_:_:_:where:)-76b29","title":"func select<T, C1, C2, C3, C4, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:orderby:_:_:where:)-4ssr4","title":"func select<T, C1, C2, C3, C4, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:where:)-8zuim","title":"func select<T, C1, C2, C3, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:orderby:_:_:)-7vypu","title":"func select<T, C1, C2, C3, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:orderby:_:_:_:_:)-3vzs4","title":"func select<T, C1, C2, C3, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:orderby:_:_:_:_:where:)-9nnfb","title":"func select<T, C1, C2, C3, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:orderby:_:_:where:)-894vt","title":"func select<T, C1, C2, C3, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:where:)-2y3m6","title":"func select<T, C1, C2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:orderby:_:_:)-367ir","title":"func select<T, C1, C2, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:orderby:_:_:_:_:)-4r3bd","title":"func select<T, C1, C2, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:orderby:_:_:_:_:where:)-9r465","title":"func select<T, C1, C2, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:orderby:_:_:where:)-9hxez","title":"func select<T, C1, C2, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:where:)-5psgp","title":"func select<T, C, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, Int?, where: (T.Schema) -> P) async throws -> [C.Value]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:orderby:_:_:)-44mvj","title":"func select<T, C, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) async throws -> [C.Value]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:orderby:_:_:_:_:)-elrg","title":"func select<T, C, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) async throws -> [C.Value]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:orderby:_:_:_:_:where:)-6a0n8","title":"func select<T, C, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [C.Value]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:orderby:_:_:where:)-4pvxl","title":"func select<T, C, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [C.Value]","type":"method"}],"path":"\/documentation\/northwind\/northwind\/sqldatabaseasyncfetchoperations-implementations","title":"SQLDatabaseAsyncFetchOperations Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/asyncdatabasequeue","title":"var asyncDatabaseQueue: DispatchQueue","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/get(schema:pragma:as:)-3hyca","title":"func get<V>(schema: String?, pragma: String, as: V.Type) async throws -> V","type":"method"},{"path":"\/documentation\/northwind\/northwind\/runondatabasequeue(block:)","title":"func runOnDatabaseQueue<R>(block: () throws -> R) async throws -> R","type":"method"}],"path":"\/documentation\/northwind\/northwind\/sqldatabaseasyncoperations-implementations","title":"SQLDatabaseAsyncOperations Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/delete(_:)-3elsv","title":"func delete<T>(T) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/delete(from:id:)-3sc7l","title":"func delete<T>(from: KeyPath<Self.RecordTypes, T.Type>, id: T.Schema.PrimaryKeyColumn.Value) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/delete(from:where:)-25sx0","title":"func delete<T, P>(from: KeyPath<Self.RecordTypes, T.Type>, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/delete(from:where:is:)-zfq2","title":"func delete<T, C>(from: KeyPath<Self.RecordTypes, T.Type>, where: KeyPath<T.Schema, C>, is: C.Value) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/insert(_:)-56ghh","title":"func insert<T>(T) throws -> T","type":"method"},{"path":"\/documentation\/northwind\/northwind\/insert(into:_:_:_:_:_:_:values:_:_:_:_:_:)","title":"func insert<T, C1, C2, C3, C4, C5, C6>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, values: C1.Value, C2.Value, C3.Value, C4.Value, C5.Value, C6.Value) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/insert(into:_:_:_:_:_:values:_:_:_:_:)","title":"func insert<T, C1, C2, C3, C4, C5>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, values: C1.Value, C2.Value, C3.Value, C4.Value, C5.Value) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/insert(into:_:_:_:_:values:_:_:_:)","title":"func insert<T, C1, C2, C3, C4>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, values: C1.Value, C2.Value, C3.Value, C4.Value) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/insert(into:_:_:_:values:_:_:)","title":"func insert<T, C1, C2, C3>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, values: C1.Value, C2.Value, C3.Value) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/insert(into:_:_:values:_:)","title":"func insert<T, C1, C2>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, values: C1.Value, C2.Value) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/insert(into:_:values:)","title":"func insert<T, C>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, values: C.Value) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:)-5sdrt","title":"func update<T>(T) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:set:to:set:to:set:to:set:to:set:to:set:to:where:)","title":"func update<T, C1, C2, C3, C4, C5, C6, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, set: KeyPath<T.Schema, C5>, to: C5.Value, set: KeyPath<T.Schema, C6>, to: C6.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:set:to:set:to:set:to:set:to:set:to:set:to:where:is:)","title":"func update<T, C1, C2, C3, C4, C5, C6, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, set: KeyPath<T.Schema, C5>, to: C5.Value, set: KeyPath<T.Schema, C6>, to: C6.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:set:to:set:to:set:to:set:to:set:to:where:)","title":"func update<T, C1, C2, C3, C4, C5, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, set: KeyPath<T.Schema, C5>, to: C5.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:set:to:set:to:set:to:set:to:set:to:where:is:)","title":"func update<T, C1, C2, C3, C4, C5, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, set: KeyPath<T.Schema, C5>, to: C5.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:set:to:set:to:set:to:set:to:where:)","title":"func update<T, C1, C2, C3, C4, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:set:to:set:to:set:to:set:to:where:is:)","title":"func update<T, C1, C2, C3, C4, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:set:to:set:to:set:to:where:)","title":"func update<T, C1, C2, C3, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:set:to:set:to:set:to:where:is:)","title":"func update<T, C1, C2, C3, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:set:to:set:to:where:)","title":"func update<T, C1, C2, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:set:to:set:to:where:is:)","title":"func update<T, C1, C2, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:set:to:where:)","title":"func update<T, C, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C>, to: C.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/update(_:set:to:where:is:)","title":"func update<T, C, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C>, to: C.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"}],"path":"\/documentation\/northwind\/northwind\/sqldatabasechangeoperations-implementations","title":"SQLDatabaseChangeOperations Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:)-76ijo","title":"func select<T, C>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, Int?) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:)-91hii","title":"func select<T, C1, C2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, Int?) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:)-20jzl","title":"func select<T, C1, C2, C3>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:)-3ofbz","title":"func select<T, C1, C2, C3, C4>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:)-6hj37","title":"func select<T, C1, C2, C3, C4, C5>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:_:)-qwrk","title":"func select<T, C1, C2, C3, C4, C5, C6>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:_:where:)-6bkfv","title":"func select<T, C1, C2, C3, C4, C5, C6, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:orderby:_:_:)-1mfyc","title":"func select<T, C1, C2, C3, C4, C5, C6, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:orderby:_:_:_:_:)-4pile","title":"func select<T, C1, C2, C3, C4, C5, C6, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:orderby:_:_:_:_:where:)-58x5r","title":"func select<T, C1, C2, C3, C4, C5, C6, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:orderby:_:_:where:)-7fb7u","title":"func select<T, C1, C2, C3, C4, C5, C6, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:_:where:)-19lw4","title":"func select<T, C1, C2, C3, C4, C5, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:orderby:_:_:)-gu99","title":"func select<T, C1, C2, C3, C4, C5, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:orderby:_:_:_:_:)-2sey8","title":"func select<T, C1, C2, C3, C4, C5, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:orderby:_:_:_:_:where:)-1tcj1","title":"func select<T, C1, C2, C3, C4, C5, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:orderby:_:_:where:)-6saes","title":"func select<T, C1, C2, C3, C4, C5, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:_:where:)-92v5c","title":"func select<T, C1, C2, C3, C4, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:orderby:_:_:)-2fdql","title":"func select<T, C1, C2, C3, C4, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:orderby:_:_:_:_:)-6vj56","title":"func select<T, C1, C2, C3, C4, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:orderby:_:_:_:_:where:)-3dv5s","title":"func select<T, C1, C2, C3, C4, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:orderby:_:_:where:)-8sj17","title":"func select<T, C1, C2, C3, C4, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:_:where:)-9p51m","title":"func select<T, C1, C2, C3, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:orderby:_:_:)-gowa","title":"func select<T, C1, C2, C3, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:orderby:_:_:_:_:)-4uhgw","title":"func select<T, C1, C2, C3, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:orderby:_:_:_:_:where:)-84lx9","title":"func select<T, C1, C2, C3, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:orderby:_:_:where:)-33enk","title":"func select<T, C1, C2, C3, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:_:where:)-9nwjh","title":"func select<T, C1, C2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:orderby:_:_:)-3amh2","title":"func select<T, C1, C2, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:orderby:_:_:_:_:)-4mbh0","title":"func select<T, C1, C2, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:orderby:_:_:_:_:where:)-5g02v","title":"func select<T, C1, C2, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:orderby:_:_:where:)-8coxg","title":"func select<T, C1, C2, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:_:where:)-8mnyi","title":"func select<T, C, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, Int?, where: (T.Schema) -> P) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:orderby:_:_:)-3k40n","title":"func select<T, C, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:orderby:_:_:_:_:)-2njve","title":"func select<T, C, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:orderby:_:_:_:_:where:)-2m8gq","title":"func select<T, C, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/northwind\/northwind\/select(from:_:orderby:_:_:where:)-1ahot","title":"func select<T, C, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [C.Value]","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/subscript(dynamicmember:)","title":"subscript<T>(dynamicMember _: KeyPath<Self.RecordTypes, T.Type>) -> SQLRecordFetchOperations<Self, T>","type":"subscript"}],"path":"\/documentation\/northwind\/northwind\/sqldatabasefetchoperations-implementations","title":"SQLDatabaseFetchOperations Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/northwind\/execute(_:_:)","title":"func execute(String, [SQLiteValueType]?) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/fetch(_:_:yield:)","title":"func fetch(String, [SQLiteValueType]?, yield: (OpaquePointer, inout Bool) throws -> Void) throws","type":"method"},{"path":"\/documentation\/northwind\/northwind\/get(schema:pragma:as:)-7e4zw","title":"func get<V>(schema: String?, pragma: String, as: V.Type) throws -> V","type":"method"},{"path":"\/documentation\/northwind\/northwind\/set(schema:pragma:to:)","title":"func set(schema: String?, pragma: String, to: SQLiteValueType) throws","type":"method"}],"path":"\/documentation\/northwind\/northwind\/sqldatabaseoperations-implementations","title":"SQLDatabaseOperations Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/northwind","title":"Northwind","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/order\/init(id:customerid:employeeid:orderdate:requireddate:shippeddate:shipvia:freight:shipname:shipaddress:shipcity:shipregion:shippostalcode:shipcountry:)","title":"init(id: Int, customerID: String?, employeeID: Int?, orderDate: Date?, requiredDate: Date?, shippedDate: Date?, shipVia: Int?, freight: String?, shipName: String?, shipAddress: String?, shipCity: String?, shipRegion: String?, shipPostalCode: String?, shipCountry: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/customerid","title":"var customerID: String?","type":"property"},{"path":"\/documentation\/northwind\/order\/employeeid","title":"var employeeID: Int?","type":"property"},{"path":"\/documentation\/northwind\/order\/freight","title":"var freight: String?","type":"property"},{"path":"\/documentation\/northwind\/order\/id-5lhbb","title":"var id: Int","type":"property"},{"path":"\/documentation\/northwind\/order\/orderdate","title":"var orderDate: Date?","type":"property"},{"path":"\/documentation\/northwind\/order\/requireddate","title":"var requiredDate: Date?","type":"property"},{"path":"\/documentation\/northwind\/order\/shipaddress","title":"var shipAddress: String?","type":"property"},{"path":"\/documentation\/northwind\/order\/shipcity","title":"var shipCity: String?","type":"property"},{"path":"\/documentation\/northwind\/order\/shipcountry","title":"var shipCountry: String?","type":"property"},{"path":"\/documentation\/northwind\/order\/shipname","title":"var shipName: String?","type":"property"},{"path":"\/documentation\/northwind\/order\/shippostalcode","title":"var shipPostalCode: String?","type":"property"},{"path":"\/documentation\/northwind\/order\/shipregion","title":"var shipRegion: String?","type":"property"},{"path":"\/documentation\/northwind\/order\/shipvia","title":"var shipVia: Int?","type":"property"},{"path":"\/documentation\/northwind\/order\/shippeddate","title":"var shippedDate: Date?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/schema-swift.type.property","title":"static let schema: Order.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/order\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/id-67hbl","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/northwind\/order\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/id-4qgyh","title":"var id: Self.ID","type":"property"}],"path":"\/documentation\/northwind\/order\/sqlkeyedtablerecord-implementations","title":"SQLKeyedTableRecord Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/customerid","title":"let customerID: MappedForeignKey<Order, String?, MappedColumn<Customer, String?>>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/employeeid","title":"let employeeID: MappedForeignKey<Order, Int?, MappedColumn<Employee, Int?>>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/freight","title":"let freight: MappedColumn<Order, String?>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/id","title":"let id: MappedColumn<Order, Int>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/orderdate","title":"let orderDate: MappedColumn<Order, Date?>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/requireddate","title":"let requiredDate: MappedColumn<Order, Date?>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/shipaddress","title":"let shipAddress: MappedColumn<Order, String?>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/shipcity","title":"let shipCity: MappedColumn<Order, String?>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/shipcountry","title":"let shipCountry: MappedColumn<Order, String?>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/shipname","title":"let shipName: MappedColumn<Order, String?>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/shippostalcode","title":"let shipPostalCode: MappedColumn<Order, String?>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/shipregion","title":"let shipRegion: MappedColumn<Order, String?>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/shipvia","title":"let shipVia: MappedForeignKey<Order, Int?, MappedColumn<Shipper, Int>>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/shippeddate","title":"let shippedDate: MappedColumn<Order, Date?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/matchclosuretype","title":"Order.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/propertyindices","title":"Order.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/recordtype","title":"Order.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/delete","title":"static let delete: String","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/deleteparameterindices","title":"static let deleteParameterIndices: Order.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/insert","title":"static let insert: String","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/insertparameterindices","title":"static let insertParameterIndices: Order.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/insertreturning","title":"static let insertReturning: String","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/primarykeycolumn","title":"static let primaryKeyColumn: MappedColumn<Order, Int>","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: Order.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/update","title":"static let update: String","type":"property"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/updateparameterindices","title":"static let updateParameterIndices: Order.Schema.PropertyIndices","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> Order.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/==(_:_:)","title":"static func == (Self, Self.PrimaryKeyColumn.Value?) -> SQLColumnValuePredicate<Self.PrimaryKeyColumn>","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/in(_:)","title":"func `in`(ClosedRange<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueRangePredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/northwind\/order\/schema-swift.struct\/notin(_:)","title":"func notIn(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"}],"path":"\/documentation\/northwind\/order\/schema-swift.struct\/sqlkeyedtableschema-implementations","title":"SQLKeyedTableSchema Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/order\/schema-swift.struct","title":"Order.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/init(_:indices:)","title":"init(OpaquePointer!, indices: Order.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: Order.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/order\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/order\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/northwind\/order\/sqltablerecord-implementations","title":"SQLTableRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/order","title":"Order","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/id-swift.struct\/init(_:_:)","title":"init(Int, Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/id-swift.struct\/orderid","title":"let orderID: Int","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/id-swift.struct\/productid","title":"let productID: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/id-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/orderdetail\/id-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/orderdetail\/id-swift.struct","title":"OrderDetail.ID","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/orderdetail\/init(orderid:productid:unitprice:quantity:discount:)","title":"init(orderID: Int, productID: Int, unitPrice: String, quantity: Int, discount: Double)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/discount","title":"var discount: Double","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/id-swift.property-9ny75","title":"var id: OrderDetail.ID","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/orderid","title":"var orderID: Int","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/productid","title":"var productID: Int","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/quantity","title":"var quantity: Int","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/unitprice","title":"var unitPrice: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.type.property","title":"static let schema: OrderDetail.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/orderdetail\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/id-swift.property-8iude","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/northwind\/orderdetail\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/discount","title":"let discount: MappedColumn<OrderDetail, Double>","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/orderid","title":"let orderID: MappedForeignKey<OrderDetail, Int, MappedColumn<Order, Int>>","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/productid","title":"let productID: MappedForeignKey<OrderDetail, Int, MappedColumn<Product, Int>>","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/quantity","title":"let quantity: MappedColumn<OrderDetail, Int>","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/unitprice","title":"let unitPrice: MappedColumn<OrderDetail, String>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/matchclosuretype","title":"OrderDetail.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/propertyindices","title":"OrderDetail.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/recordtype","title":"OrderDetail.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/delete","title":"static let delete: String","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/deleteparameterindices","title":"static let deleteParameterIndices: OrderDetail.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/insert","title":"static let insert: String","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/insertparameterindices","title":"static let insertParameterIndices: OrderDetail.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/insertreturning","title":"static let insertReturning: String","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: OrderDetail.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/update","title":"static let update: String","type":"property"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/updateparameterindices","title":"static let updateParameterIndices: OrderDetail.Schema.PropertyIndices","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> OrderDetail.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/orderdetail\/schema-swift.struct","title":"OrderDetail.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/init(_:indices:)","title":"init(OpaquePointer!, indices: OrderDetail.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: OrderDetail.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/orderdetail\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetail\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/northwind\/orderdetail\/sqltablerecord-implementations","title":"SQLTableRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/orderdetail","title":"OrderDetail","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetailsextended\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/orderdetailsextended\/init(orderid:productid:productname:unitprice:quantity:discount:extendedprice:)","title":"init(orderID: Int?, productID: Int?, productName: String?, unitPrice: String?, quantity: Int?, discount: Double?, extendedPrice: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetailsextended\/discount","title":"var discount: Double?","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/extendedprice","title":"var extendedPrice: String?","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/orderid","title":"var orderID: Int?","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/productid","title":"var productID: Int?","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/productname","title":"var productName: String?","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/quantity","title":"var quantity: Int?","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/unitprice","title":"var unitPrice: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.type.property","title":"static let schema: OrderDetailsExtended.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetailsextended\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/orderdetailsextended\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/discount","title":"let discount: MappedColumn<OrderDetailsExtended, Double?>","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/extendedprice","title":"let extendedPrice: MappedColumn<OrderDetailsExtended, String?>","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/orderid","title":"let orderID: MappedColumn<OrderDetailsExtended, Int?>","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/productid","title":"let productID: MappedColumn<OrderDetailsExtended, Int?>","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/productname","title":"let productName: MappedColumn<OrderDetailsExtended, String?>","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/quantity","title":"let quantity: MappedColumn<OrderDetailsExtended, Int?>","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/unitprice","title":"let unitPrice: MappedColumn<OrderDetailsExtended, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/matchclosuretype","title":"OrderDetailsExtended.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/propertyindices","title":"OrderDetailsExtended.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/recordtype","title":"OrderDetailsExtended.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: OrderDetailsExtended.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> OrderDetailsExtended.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/orderdetailsextended\/schema-swift.struct","title":"OrderDetailsExtended.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetailsextended\/init(_:indices:)","title":"init(OpaquePointer!, indices: OrderDetailsExtended.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/orderdetailsextended\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: OrderDetailsExtended.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/orderdetailsextended\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/orderdetailsextended","title":"OrderDetailsExtended","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersubtotal\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/ordersubtotal\/init(orderid:subtotal:)","title":"init(orderID: Int?, subtotal: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersubtotal\/orderid","title":"var orderID: Int?","type":"property"},{"path":"\/documentation\/northwind\/ordersubtotal\/subtotal","title":"var subtotal: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.type.property","title":"static let schema: OrderSubtotal.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersubtotal\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/ordersubtotal\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/orderid","title":"let orderID: MappedColumn<OrderSubtotal, Int?>","type":"property"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/subtotal","title":"let subtotal: MappedColumn<OrderSubtotal, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/matchclosuretype","title":"OrderSubtotal.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/propertyindices","title":"OrderSubtotal.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/recordtype","title":"OrderSubtotal.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: OrderSubtotal.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> OrderSubtotal.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/ordersubtotal\/schema-swift.struct","title":"OrderSubtotal.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersubtotal\/init(_:indices:)","title":"init(OpaquePointer!, indices: OrderSubtotal.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersubtotal\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: OrderSubtotal.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/ordersubtotal\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/ordersubtotal","title":"OrderSubtotal","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersqry\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/ordersqry\/init(orderid:customerid:employeeid:orderdate:requireddate:shippeddate:shipvia:freight:shipname:shipaddress:shipcity:shipregion:shippostalcode:shipcountry:companyname:address:city:region:postalcode:country:)","title":"init(orderID: Int?, customerID: String?, employeeID: Int?, orderDate: Date?, requiredDate: Date?, shippedDate: Date?, shipVia: Int?, freight: String?, shipName: String?, shipAddress: String?, shipCity: String?, shipRegion: String?, shipPostalCode: String?, shipCountry: String?, companyName: String?, address: String?, city: String?, region: String?, postalCode: String?, country: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersqry\/address","title":"var address: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/city","title":"var city: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/companyname","title":"var companyName: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/country","title":"var country: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/customerid","title":"var customerID: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/employeeid","title":"var employeeID: Int?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/freight","title":"var freight: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/orderdate","title":"var orderDate: Date?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/orderid","title":"var orderID: Int?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/postalcode","title":"var postalCode: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/region","title":"var region: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/requireddate","title":"var requiredDate: Date?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/shipaddress","title":"var shipAddress: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/shipcity","title":"var shipCity: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/shipcountry","title":"var shipCountry: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/shipname","title":"var shipName: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/shippostalcode","title":"var shipPostalCode: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/shipregion","title":"var shipRegion: String?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/shipvia","title":"var shipVia: Int?","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/shippeddate","title":"var shippedDate: Date?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.type.property","title":"static let schema: OrdersQry.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersqry\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/ordersqry\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/address","title":"let address: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/city","title":"let city: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/companyname","title":"let companyName: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/country","title":"let country: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/customerid","title":"let customerID: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/employeeid","title":"let employeeID: MappedColumn<OrdersQry, Int?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/freight","title":"let freight: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/orderdate","title":"let orderDate: MappedColumn<OrdersQry, Date?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/orderid","title":"let orderID: MappedColumn<OrdersQry, Int?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/postalcode","title":"let postalCode: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/region","title":"let region: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/requireddate","title":"let requiredDate: MappedColumn<OrdersQry, Date?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/shipaddress","title":"let shipAddress: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/shipcity","title":"let shipCity: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/shipcountry","title":"let shipCountry: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/shipname","title":"let shipName: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/shippostalcode","title":"let shipPostalCode: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/shipregion","title":"let shipRegion: MappedColumn<OrdersQry, String?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/shipvia","title":"let shipVia: MappedColumn<OrdersQry, Int?>","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/shippeddate","title":"let shippedDate: MappedColumn<OrdersQry, Date?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/matchclosuretype","title":"OrdersQry.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/propertyindices","title":"OrdersQry.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/recordtype","title":"OrdersQry.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: OrdersQry.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> OrdersQry.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/ordersqry\/schema-swift.struct","title":"OrdersQry.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersqry\/init(_:indices:)","title":"init(OpaquePointer!, indices: OrdersQry.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/ordersqry\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: OrdersQry.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/ordersqry\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/ordersqry","title":"OrdersQry","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/product\/init(id:productname:supplierid:categoryid:quantityperunit:unitprice:unitsinstock:unitsonorder:reorderlevel:discontinued:)","title":"init(id: Int, productName: String, supplierID: Int?, categoryID: Int?, quantityPerUnit: String?, unitPrice: String?, unitsInStock: Int?, unitsOnOrder: Int?, reorderLevel: Int?, discontinued: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/categoryid","title":"var categoryID: Int?","type":"property"},{"path":"\/documentation\/northwind\/product\/discontinued","title":"var discontinued: String","type":"property"},{"path":"\/documentation\/northwind\/product\/id-7350h","title":"var id: Int","type":"property"},{"path":"\/documentation\/northwind\/product\/productname","title":"var productName: String","type":"property"},{"path":"\/documentation\/northwind\/product\/quantityperunit","title":"var quantityPerUnit: String?","type":"property"},{"path":"\/documentation\/northwind\/product\/reorderlevel","title":"var reorderLevel: Int?","type":"property"},{"path":"\/documentation\/northwind\/product\/supplierid","title":"var supplierID: Int?","type":"property"},{"path":"\/documentation\/northwind\/product\/unitprice","title":"var unitPrice: String?","type":"property"},{"path":"\/documentation\/northwind\/product\/unitsinstock","title":"var unitsInStock: Int?","type":"property"},{"path":"\/documentation\/northwind\/product\/unitsonorder","title":"var unitsOnOrder: Int?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/schema-swift.type.property","title":"static let schema: Product.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/product\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/id-2kaqj","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/northwind\/product\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/id-6eeft","title":"var id: Self.ID","type":"property"}],"path":"\/documentation\/northwind\/product\/sqlkeyedtablerecord-implementations","title":"SQLKeyedTableRecord Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/categoryid","title":"let categoryID: MappedForeignKey<Product, Int?, MappedColumn<Category, Int?>>","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/discontinued","title":"let discontinued: MappedColumn<Product, String>","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/id","title":"let id: MappedColumn<Product, Int>","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/productname","title":"let productName: MappedColumn<Product, String>","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/quantityperunit","title":"let quantityPerUnit: MappedColumn<Product, String?>","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/reorderlevel","title":"let reorderLevel: MappedColumn<Product, Int?>","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/supplierid","title":"let supplierID: MappedForeignKey<Product, Int?, MappedColumn<Supplier, Int>>","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/unitprice","title":"let unitPrice: MappedColumn<Product, String?>","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/unitsinstock","title":"let unitsInStock: MappedColumn<Product, Int?>","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/unitsonorder","title":"let unitsOnOrder: MappedColumn<Product, Int?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/matchclosuretype","title":"Product.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/propertyindices","title":"Product.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/recordtype","title":"Product.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/delete","title":"static let delete: String","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/deleteparameterindices","title":"static let deleteParameterIndices: Product.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/insert","title":"static let insert: String","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/insertparameterindices","title":"static let insertParameterIndices: Product.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/insertreturning","title":"static let insertReturning: String","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/primarykeycolumn","title":"static let primaryKeyColumn: MappedColumn<Product, Int>","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: Product.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/update","title":"static let update: String","type":"property"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/updateparameterindices","title":"static let updateParameterIndices: Product.Schema.PropertyIndices","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> Product.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/==(_:_:)","title":"static func == (Self, Self.PrimaryKeyColumn.Value?) -> SQLColumnValuePredicate<Self.PrimaryKeyColumn>","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/in(_:)","title":"func `in`(ClosedRange<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueRangePredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/northwind\/product\/schema-swift.struct\/notin(_:)","title":"func notIn(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"}],"path":"\/documentation\/northwind\/product\/schema-swift.struct\/sqlkeyedtableschema-implementations","title":"SQLKeyedTableSchema Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/product\/schema-swift.struct","title":"Product.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/init(_:indices:)","title":"init(OpaquePointer!, indices: Product.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: Product.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/product\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/product\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/northwind\/product\/sqltablerecord-implementations","title":"SQLTableRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/product","title":"Product","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/productdetailsv\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/productdetailsv\/init(productid:productname:supplierid:categoryid:quantityperunit:unitprice:unitsinstock:unitsonorder:reorderlevel:discontinued:categoryname:categorydescription:suppliername:supplierregion:)","title":"init(productID: Int?, productName: String?, supplierID: Int?, categoryID: Int?, quantityPerUnit: String?, unitPrice: String?, unitsInStock: Int?, unitsOnOrder: Int?, reorderLevel: Int?, discontinued: String?, categoryName: String?, categoryDescription: String?, supplierName: String?, supplierRegion: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productdetailsv\/categorydescription","title":"var categoryDescription: String?","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/categoryid","title":"var categoryID: Int?","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/categoryname","title":"var categoryName: String?","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/discontinued","title":"var discontinued: String?","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/productid","title":"var productID: Int?","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/productname","title":"var productName: String?","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/quantityperunit","title":"var quantityPerUnit: String?","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/reorderlevel","title":"var reorderLevel: Int?","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/supplierid","title":"var supplierID: Int?","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/suppliername","title":"var supplierName: String?","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/supplierregion","title":"var supplierRegion: String?","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/unitprice","title":"var unitPrice: String?","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/unitsinstock","title":"var unitsInStock: Int?","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/unitsonorder","title":"var unitsOnOrder: Int?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.type.property","title":"static let schema: ProductDetailsV.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/productdetailsv\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/productdetailsv\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/categorydescription","title":"let categoryDescription: MappedColumn<ProductDetailsV, String?>","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/categoryid","title":"let categoryID: MappedColumn<ProductDetailsV, Int?>","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/categoryname","title":"let categoryName: MappedColumn<ProductDetailsV, String?>","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/discontinued","title":"let discontinued: MappedColumn<ProductDetailsV, String?>","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/productid","title":"let productID: MappedColumn<ProductDetailsV, Int?>","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/productname","title":"let productName: MappedColumn<ProductDetailsV, String?>","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/quantityperunit","title":"let quantityPerUnit: MappedColumn<ProductDetailsV, String?>","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/reorderlevel","title":"let reorderLevel: MappedColumn<ProductDetailsV, Int?>","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/supplierid","title":"let supplierID: MappedColumn<ProductDetailsV, Int?>","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/suppliername","title":"let supplierName: MappedColumn<ProductDetailsV, String?>","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/supplierregion","title":"let supplierRegion: MappedColumn<ProductDetailsV, String?>","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/unitprice","title":"let unitPrice: MappedColumn<ProductDetailsV, String?>","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/unitsinstock","title":"let unitsInStock: MappedColumn<ProductDetailsV, Int?>","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/unitsonorder","title":"let unitsOnOrder: MappedColumn<ProductDetailsV, Int?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/matchclosuretype","title":"ProductDetailsV.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/propertyindices","title":"ProductDetailsV.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/recordtype","title":"ProductDetailsV.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: ProductDetailsV.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> ProductDetailsV.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/productdetailsv\/schema-swift.struct","title":"ProductDetailsV.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/productdetailsv\/init(_:indices:)","title":"init(OpaquePointer!, indices: ProductDetailsV.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/productdetailsv\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: ProductDetailsV.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/productdetailsv\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/productdetailsv","title":"ProductDetailsV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsalesfor1997\/init(categoryname:productname:productsales:)","title":"init(categoryName: String?, productName: String?, productSales: String?)","type":"init"},{"path":"\/documentation\/northwind\/productsalesfor1997\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsalesfor1997\/categoryname","title":"var categoryName: String?","type":"property"},{"path":"\/documentation\/northwind\/productsalesfor1997\/productname","title":"var productName: String?","type":"property"},{"path":"\/documentation\/northwind\/productsalesfor1997\/productsales","title":"var productSales: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.type.property","title":"static let schema: ProductSalesFor1997.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsalesfor1997\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/productsalesfor1997\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/categoryname","title":"let categoryName: MappedColumn<ProductSalesFor1997, String?>","type":"property"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/productname","title":"let productName: MappedColumn<ProductSalesFor1997, String?>","type":"property"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/productsales","title":"let productSales: MappedColumn<ProductSalesFor1997, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/matchclosuretype","title":"ProductSalesFor1997.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/propertyindices","title":"ProductSalesFor1997.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/recordtype","title":"ProductSalesFor1997.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: ProductSalesFor1997.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> ProductSalesFor1997.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/productsalesfor1997\/schema-swift.struct","title":"ProductSalesFor1997.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsalesfor1997\/init(_:indices:)","title":"init(OpaquePointer!, indices: ProductSalesFor1997.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsalesfor1997\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: ProductSalesFor1997.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/productsalesfor1997\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/productsalesfor1997","title":"ProductSalesFor1997","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/init(productname:unitprice:)","title":"init(productName: String?, unitPrice: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/productname","title":"var productName: String?","type":"property"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/unitprice","title":"var unitPrice: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.type.property","title":"static let schema: ProductsAboveAveragePrice.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/productsaboveaverageprice\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/productname","title":"let productName: MappedColumn<ProductsAboveAveragePrice, String?>","type":"property"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/unitprice","title":"let unitPrice: MappedColumn<ProductsAboveAveragePrice, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/matchclosuretype","title":"ProductsAboveAveragePrice.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/propertyindices","title":"ProductsAboveAveragePrice.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/recordtype","title":"ProductsAboveAveragePrice.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: ProductsAboveAveragePrice.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> ProductsAboveAveragePrice.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/productsaboveaverageprice\/schema-swift.struct","title":"ProductsAboveAveragePrice.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/init(_:indices:)","title":"init(OpaquePointer!, indices: ProductsAboveAveragePrice.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsaboveaverageprice\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: ProductsAboveAveragePrice.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/productsaboveaverageprice\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/productsaboveaverageprice","title":"ProductsAboveAveragePrice","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsbycategory\/init(categoryname:productname:quantityperunit:unitsinstock:discontinued:)","title":"init(categoryName: String?, productName: String?, quantityPerUnit: String?, unitsInStock: Int?, discontinued: String?)","type":"init"},{"path":"\/documentation\/northwind\/productsbycategory\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsbycategory\/categoryname","title":"var categoryName: String?","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/discontinued","title":"var discontinued: String?","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/productname","title":"var productName: String?","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/quantityperunit","title":"var quantityPerUnit: String?","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/unitsinstock","title":"var unitsInStock: Int?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.type.property","title":"static let schema: ProductsByCategory.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsbycategory\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/productsbycategory\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/categoryname","title":"let categoryName: MappedColumn<ProductsByCategory, String?>","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/discontinued","title":"let discontinued: MappedColumn<ProductsByCategory, String?>","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/productname","title":"let productName: MappedColumn<ProductsByCategory, String?>","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/quantityperunit","title":"let quantityPerUnit: MappedColumn<ProductsByCategory, String?>","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/unitsinstock","title":"let unitsInStock: MappedColumn<ProductsByCategory, Int?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/matchclosuretype","title":"ProductsByCategory.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/propertyindices","title":"ProductsByCategory.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/recordtype","title":"ProductsByCategory.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: ProductsByCategory.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> ProductsByCategory.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/productsbycategory\/schema-swift.struct","title":"ProductsByCategory.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsbycategory\/init(_:indices:)","title":"init(OpaquePointer!, indices: ProductsByCategory.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/productsbycategory\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: ProductsByCategory.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/productsbycategory\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/productsbycategory","title":"ProductsByCategory","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/quarterlyorder\/init(customerid:companyname:city:country:)","title":"init(customerID: String?, companyName: String?, city: String?, country: String?)","type":"init"},{"path":"\/documentation\/northwind\/quarterlyorder\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/quarterlyorder\/city","title":"var city: String?","type":"property"},{"path":"\/documentation\/northwind\/quarterlyorder\/companyname","title":"var companyName: String?","type":"property"},{"path":"\/documentation\/northwind\/quarterlyorder\/country","title":"var country: String?","type":"property"},{"path":"\/documentation\/northwind\/quarterlyorder\/customerid","title":"var customerID: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.type.property","title":"static let schema: QuarterlyOrder.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/quarterlyorder\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/quarterlyorder\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/city","title":"let city: MappedColumn<QuarterlyOrder, String?>","type":"property"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/companyname","title":"let companyName: MappedColumn<QuarterlyOrder, String?>","type":"property"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/country","title":"let country: MappedColumn<QuarterlyOrder, String?>","type":"property"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/customerid","title":"let customerID: MappedColumn<QuarterlyOrder, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/matchclosuretype","title":"QuarterlyOrder.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/propertyindices","title":"QuarterlyOrder.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/recordtype","title":"QuarterlyOrder.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: QuarterlyOrder.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> QuarterlyOrder.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/quarterlyorder\/schema-swift.struct","title":"QuarterlyOrder.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/quarterlyorder\/init(_:indices:)","title":"init(OpaquePointer!, indices: QuarterlyOrder.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/quarterlyorder\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: QuarterlyOrder.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/quarterlyorder\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/quarterlyorder","title":"QuarterlyOrder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/region\/init(id:regiondescription:)","title":"init(id: Int, regionDescription: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/id-6xi51","title":"var id: Int","type":"property"},{"path":"\/documentation\/northwind\/region\/regiondescription","title":"var regionDescription: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/schema-swift.type.property","title":"static let schema: Region.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/region\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/id-4lh9d","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/northwind\/region\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/id-3cqq2","title":"var id: Self.ID","type":"property"}],"path":"\/documentation\/northwind\/region\/sqlkeyedtablerecord-implementations","title":"SQLKeyedTableRecord Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/id","title":"let id: MappedColumn<Region, Int>","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/regiondescription","title":"let regionDescription: MappedColumn<Region, String>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/matchclosuretype","title":"Region.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/propertyindices","title":"Region.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/recordtype","title":"Region.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/delete","title":"static let delete: String","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/deleteparameterindices","title":"static let deleteParameterIndices: Region.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/insert","title":"static let insert: String","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/insertparameterindices","title":"static let insertParameterIndices: Region.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/insertreturning","title":"static let insertReturning: String","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/primarykeycolumn","title":"static let primaryKeyColumn: MappedColumn<Region, Int>","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: Region.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/update","title":"static let update: String","type":"property"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/updateparameterindices","title":"static let updateParameterIndices: Region.Schema.PropertyIndices","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> Region.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/==(_:_:)","title":"static func == (Self, Self.PrimaryKeyColumn.Value?) -> SQLColumnValuePredicate<Self.PrimaryKeyColumn>","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/in(_:)","title":"func `in`(ClosedRange<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueRangePredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/northwind\/region\/schema-swift.struct\/notin(_:)","title":"func notIn(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"}],"path":"\/documentation\/northwind\/region\/schema-swift.struct\/sqlkeyedtableschema-implementations","title":"SQLKeyedTableSchema Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/region\/schema-swift.struct","title":"Region.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/init(_:indices:)","title":"init(OpaquePointer!, indices: Region.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: Region.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/region\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/region\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/northwind\/region\/sqltablerecord-implementations","title":"SQLTableRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/region","title":"Region","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/salesbycategory\/init(categoryid:categoryname:productname:productsales:)","title":"init(categoryID: Int?, categoryName: String?, productName: String?, productSales: String?)","type":"init"},{"path":"\/documentation\/northwind\/salesbycategory\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/salesbycategory\/categoryid","title":"var categoryID: Int?","type":"property"},{"path":"\/documentation\/northwind\/salesbycategory\/categoryname","title":"var categoryName: String?","type":"property"},{"path":"\/documentation\/northwind\/salesbycategory\/productname","title":"var productName: String?","type":"property"},{"path":"\/documentation\/northwind\/salesbycategory\/productsales","title":"var productSales: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.type.property","title":"static let schema: SalesByCategory.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/salesbycategory\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/salesbycategory\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/categoryid","title":"let categoryID: MappedColumn<SalesByCategory, Int?>","type":"property"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/categoryname","title":"let categoryName: MappedColumn<SalesByCategory, String?>","type":"property"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/productname","title":"let productName: MappedColumn<SalesByCategory, String?>","type":"property"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/productsales","title":"let productSales: MappedColumn<SalesByCategory, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/matchclosuretype","title":"SalesByCategory.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/propertyindices","title":"SalesByCategory.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/recordtype","title":"SalesByCategory.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: SalesByCategory.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> SalesByCategory.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/salesbycategory\/schema-swift.struct","title":"SalesByCategory.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/salesbycategory\/init(_:indices:)","title":"init(OpaquePointer!, indices: SalesByCategory.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/salesbycategory\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: SalesByCategory.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/salesbycategory\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/salesbycategory","title":"SalesByCategory","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/init(saleamount:orderid:companyname:shippeddate:)","title":"init(saleAmount: String?, orderID: Int?, companyName: String?, shippedDate: Date?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/companyname","title":"var companyName: String?","type":"property"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/orderid","title":"var orderID: Int?","type":"property"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/saleamount","title":"var saleAmount: String?","type":"property"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/shippeddate","title":"var shippedDate: Date?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.type.property","title":"static let schema: SalesTotalsByAmount.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/salestotalsbyamount\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/companyname","title":"let companyName: MappedColumn<SalesTotalsByAmount, String?>","type":"property"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/orderid","title":"let orderID: MappedColumn<SalesTotalsByAmount, Int?>","type":"property"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/saleamount","title":"let saleAmount: MappedColumn<SalesTotalsByAmount, String?>","type":"property"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/shippeddate","title":"let shippedDate: MappedColumn<SalesTotalsByAmount, Date?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/matchclosuretype","title":"SalesTotalsByAmount.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/propertyindices","title":"SalesTotalsByAmount.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/recordtype","title":"SalesTotalsByAmount.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: SalesTotalsByAmount.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> SalesTotalsByAmount.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/salestotalsbyamount\/schema-swift.struct","title":"SalesTotalsByAmount.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/init(_:indices:)","title":"init(OpaquePointer!, indices: SalesTotalsByAmount.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/salestotalsbyamount\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: SalesTotalsByAmount.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/salestotalsbyamount\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/salestotalsbyamount","title":"SalesTotalsByAmount","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/shipper\/init(id:companyname:phone:)","title":"init(id: Int, companyName: String, phone: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/companyname","title":"var companyName: String","type":"property"},{"path":"\/documentation\/northwind\/shipper\/id-5uhza","title":"var id: Int","type":"property"},{"path":"\/documentation\/northwind\/shipper\/phone","title":"var phone: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.type.property","title":"static let schema: Shipper.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/shipper\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/id-6wuaf","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/northwind\/shipper\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/id-9s6z","title":"var id: Self.ID","type":"property"}],"path":"\/documentation\/northwind\/shipper\/sqlkeyedtablerecord-implementations","title":"SQLKeyedTableRecord Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/companyname","title":"let companyName: MappedColumn<Shipper, String>","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/id","title":"let id: MappedColumn<Shipper, Int>","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/phone","title":"let phone: MappedColumn<Shipper, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/matchclosuretype","title":"Shipper.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/propertyindices","title":"Shipper.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/recordtype","title":"Shipper.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/delete","title":"static let delete: String","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/deleteparameterindices","title":"static let deleteParameterIndices: Shipper.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/insert","title":"static let insert: String","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/insertparameterindices","title":"static let insertParameterIndices: Shipper.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/insertreturning","title":"static let insertReturning: String","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/primarykeycolumn","title":"static let primaryKeyColumn: MappedColumn<Shipper, Int>","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: Shipper.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/update","title":"static let update: String","type":"property"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/updateparameterindices","title":"static let updateParameterIndices: Shipper.Schema.PropertyIndices","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> Shipper.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/==(_:_:)","title":"static func == (Self, Self.PrimaryKeyColumn.Value?) -> SQLColumnValuePredicate<Self.PrimaryKeyColumn>","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/in(_:)","title":"func `in`(ClosedRange<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueRangePredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/notin(_:)","title":"func notIn(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"}],"path":"\/documentation\/northwind\/shipper\/schema-swift.struct\/sqlkeyedtableschema-implementations","title":"SQLKeyedTableSchema Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/shipper\/schema-swift.struct","title":"Shipper.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/init(_:indices:)","title":"init(OpaquePointer!, indices: Shipper.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: Shipper.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/shipper\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/shipper\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/northwind\/shipper\/sqltablerecord-implementations","title":"SQLTableRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/shipper","title":"Shipper","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/init(shippeddate:orderid:subtotal:)","title":"init(shippedDate: Date?, orderID: Int?, subtotal: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/orderid","title":"var orderID: Int?","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/shippeddate","title":"var shippedDate: Date?","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/subtotal","title":"var subtotal: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.type.property","title":"static let schema: SummaryOfSalesByQuarter.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/orderid","title":"let orderID: MappedColumn<SummaryOfSalesByQuarter, Int?>","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/shippeddate","title":"let shippedDate: MappedColumn<SummaryOfSalesByQuarter, Date?>","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/subtotal","title":"let subtotal: MappedColumn<SummaryOfSalesByQuarter, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/matchclosuretype","title":"SummaryOfSalesByQuarter.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/propertyindices","title":"SummaryOfSalesByQuarter.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/recordtype","title":"SummaryOfSalesByQuarter.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: SummaryOfSalesByQuarter.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> SummaryOfSalesByQuarter.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/schema-swift.struct","title":"SummaryOfSalesByQuarter.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/init(_:indices:)","title":"init(OpaquePointer!, indices: SummaryOfSalesByQuarter.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: SummaryOfSalesByQuarter.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/summaryofsalesbyquarter\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/summaryofsalesbyquarter","title":"SummaryOfSalesByQuarter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/init(shippeddate:orderid:subtotal:)","title":"init(shippedDate: Date?, orderID: Int?, subtotal: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/orderid","title":"var orderID: Int?","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/shippeddate","title":"var shippedDate: Date?","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/subtotal","title":"var subtotal: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.type.property","title":"static let schema: SummaryOfSalesByYear.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/summaryofsalesbyyear\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/orderid","title":"let orderID: MappedColumn<SummaryOfSalesByYear, Int?>","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/shippeddate","title":"let shippedDate: MappedColumn<SummaryOfSalesByYear, Date?>","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/subtotal","title":"let subtotal: MappedColumn<SummaryOfSalesByYear, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/matchclosuretype","title":"SummaryOfSalesByYear.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/propertyindices","title":"SummaryOfSalesByYear.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/recordtype","title":"SummaryOfSalesByYear.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: SummaryOfSalesByYear.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> SummaryOfSalesByYear.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/northwind\/summaryofsalesbyyear\/schema-swift.struct","title":"SummaryOfSalesByYear.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/init(_:indices:)","title":"init(OpaquePointer!, indices: SummaryOfSalesByYear.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/summaryofsalesbyyear\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: SummaryOfSalesByYear.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/summaryofsalesbyyear\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/summaryofsalesbyyear","title":"SummaryOfSalesByYear","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/supplier\/init(id:companyname:contactname:contacttitle:address:city:region:postalcode:country:phone:fax:homepage:)","title":"init(id: Int, companyName: String, contactName: String?, contactTitle: String?, address: String?, city: String?, region: String?, postalCode: String?, country: String?, phone: String?, fax: String?, homePage: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/address","title":"var address: String?","type":"property"},{"path":"\/documentation\/northwind\/supplier\/city","title":"var city: String?","type":"property"},{"path":"\/documentation\/northwind\/supplier\/companyname","title":"var companyName: String","type":"property"},{"path":"\/documentation\/northwind\/supplier\/contactname","title":"var contactName: String?","type":"property"},{"path":"\/documentation\/northwind\/supplier\/contacttitle","title":"var contactTitle: String?","type":"property"},{"path":"\/documentation\/northwind\/supplier\/country","title":"var country: String?","type":"property"},{"path":"\/documentation\/northwind\/supplier\/fax","title":"var fax: String?","type":"property"},{"path":"\/documentation\/northwind\/supplier\/homepage","title":"var homePage: String?","type":"property"},{"path":"\/documentation\/northwind\/supplier\/id-3gbqy","title":"var id: Int","type":"property"},{"path":"\/documentation\/northwind\/supplier\/phone","title":"var phone: String?","type":"property"},{"path":"\/documentation\/northwind\/supplier\/postalcode","title":"var postalCode: String?","type":"property"},{"path":"\/documentation\/northwind\/supplier\/region","title":"var region: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.type.property","title":"static let schema: Supplier.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/supplier\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/id-4ichy","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/northwind\/supplier\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/id-1cd53","title":"var id: Self.ID","type":"property"}],"path":"\/documentation\/northwind\/supplier\/sqlkeyedtablerecord-implementations","title":"SQLKeyedTableRecord Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/address","title":"let address: MappedColumn<Supplier, String?>","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/city","title":"let city: MappedColumn<Supplier, String?>","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/companyname","title":"let companyName: MappedColumn<Supplier, String>","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/contactname","title":"let contactName: MappedColumn<Supplier, String?>","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/contacttitle","title":"let contactTitle: MappedColumn<Supplier, String?>","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/country","title":"let country: MappedColumn<Supplier, String?>","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/fax","title":"let fax: MappedColumn<Supplier, String?>","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/homepage","title":"let homePage: MappedColumn<Supplier, String?>","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/id","title":"let id: MappedColumn<Supplier, Int>","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/phone","title":"let phone: MappedColumn<Supplier, String?>","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/postalcode","title":"let postalCode: MappedColumn<Supplier, String?>","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/region","title":"let region: MappedColumn<Supplier, String?>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/matchclosuretype","title":"Supplier.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/propertyindices","title":"Supplier.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/recordtype","title":"Supplier.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/delete","title":"static let delete: String","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/deleteparameterindices","title":"static let deleteParameterIndices: Supplier.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/insert","title":"static let insert: String","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/insertparameterindices","title":"static let insertParameterIndices: Supplier.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/insertreturning","title":"static let insertReturning: String","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/primarykeycolumn","title":"static let primaryKeyColumn: MappedColumn<Supplier, Int>","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: Supplier.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/update","title":"static let update: String","type":"property"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/updateparameterindices","title":"static let updateParameterIndices: Supplier.Schema.PropertyIndices","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> Supplier.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/==(_:_:)","title":"static func == (Self, Self.PrimaryKeyColumn.Value?) -> SQLColumnValuePredicate<Self.PrimaryKeyColumn>","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/in(_:)","title":"func `in`(ClosedRange<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueRangePredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/notin(_:)","title":"func notIn(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"}],"path":"\/documentation\/northwind\/supplier\/schema-swift.struct\/sqlkeyedtableschema-implementations","title":"SQLKeyedTableSchema Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/supplier\/schema-swift.struct","title":"Supplier.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/init(_:indices:)","title":"init(OpaquePointer!, indices: Supplier.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: Supplier.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/supplier\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/supplier\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/northwind\/supplier\/sqltablerecord-implementations","title":"SQLTableRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/supplier","title":"Supplier","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/northwind\/territory\/init(id:territorydescription:regionid:)","title":"init(id: String, territoryDescription: String, regionID: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/id-8gdfi","title":"var id: String","type":"property"},{"path":"\/documentation\/northwind\/territory\/regionid","title":"var regionID: Int","type":"property"},{"path":"\/documentation\/northwind\/territory\/territorydescription","title":"var territoryDescription: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/schema-swift.type.property","title":"static let schema: Territory.Schema","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/northwind\/territory\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/id-6tw46","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/northwind\/territory\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/id-8o4xb","title":"var id: Self.ID","type":"property"}],"path":"\/documentation\/northwind\/territory\/sqlkeyedtablerecord-implementations","title":"SQLKeyedTableRecord Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/id","title":"let id: MappedColumn<Territory, String>","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/regionid","title":"let regionID: MappedForeignKey<Territory, Int, MappedColumn<Region, Int>>","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/territorydescription","title":"let territoryDescription: MappedColumn<Territory, String>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/matchclosuretype","title":"Territory.Schema.MatchClosureType","type":"typealias"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/propertyindices","title":"Territory.Schema.PropertyIndices","type":"typealias"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/recordtype","title":"Territory.Schema.RecordType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/columncount","title":"static let columnCount: Int32","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/create","title":"static let create: String","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/delete","title":"static let delete: String","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/deleteparameterindices","title":"static let deleteParameterIndices: Territory.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/externalname","title":"static let externalName: String","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/insert","title":"static let insert: String","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/insertparameterindices","title":"static let insertParameterIndices: Territory.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/insertreturning","title":"static let insertReturning: String","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/matchselect","title":"static let matchSelect: String","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/primarykeycolumn","title":"static let primaryKeyColumn: MappedColumn<Territory, String>","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/select","title":"static let select: String","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/selectcolumnindices","title":"static let selectColumnIndices: Territory.Schema.PropertyIndices","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/selectcolumns","title":"static let selectColumns: String","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/update","title":"static let update: String","type":"property"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/updateparameterindices","title":"static let updateParameterIndices: Territory.Schema.PropertyIndices","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> Territory.Schema.PropertyIndices","type":"method"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/==(_:_:)","title":"static func == (Self, Self.PrimaryKeyColumn.Value?) -> SQLColumnValuePredicate<Self.PrimaryKeyColumn>","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/in(_:)","title":"func `in`(ClosedRange<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueRangePredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/notin(_:)","title":"func notIn(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"}],"path":"\/documentation\/northwind\/territory\/schema-swift.struct\/sqlkeyedtableschema-implementations","title":"SQLKeyedTableSchema Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/territory\/schema-swift.struct","title":"Territory.Schema","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/init(_:indices:)","title":"init(OpaquePointer!, indices: Territory.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: Territory.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/northwind\/territory\/sqlrecord-implementations","title":"SQLRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/northwind\/territory\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/northwind\/territory\/sqltablerecord-implementations","title":"SQLTableRecord Implementations","type":"symbol"}],"path":"\/documentation\/northwind\/territory","title":"Territory","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/northwind\/sqlite3_alphabetical_list_of_products_fetch(_:sql:orderby:limit:)","title":"func sqlite3_alphabetical_list_of_products_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [AlphabeticalListOfProduct]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_alphabetical_list_of_products_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_alphabetical_list_of_products_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (AlphabeticalListOfProduct) -> Bool) -> [AlphabeticalListOfProduct]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_categories_fetch(_:sql:orderby:limit:)","title":"func sqlite3_categories_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [Category]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_categories_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_categories_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (Category) -> Bool) -> [Category]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_category_delete(_:_:)","title":"func sqlite3_category_delete(OpaquePointer!, Category) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_category_find(_:for:)","title":"func sqlite3_category_find(OpaquePointer!, for: Product) -> Category?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_category_insert(_:_:)","title":"func sqlite3_category_insert(OpaquePointer!, inout Category) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_category_sales_for1997s_fetch(_:sql:orderby:limit:)","title":"func sqlite3_category_sales_for1997s_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [CategorySalesFor1997]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_category_sales_for1997s_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_category_sales_for1997s_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (CategorySalesFor1997) -> Bool) -> [CategorySalesFor1997]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_category_update(_:_:)","title":"func sqlite3_category_update(OpaquePointer!, Category) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_create_northwind(_:_:_:)","title":"func sqlite3_create_northwind(UnsafePointer<CChar>!, Int32, inout OpaquePointer?) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_current_product_lists_fetch(_:sql:orderby:limit:)","title":"func sqlite3_current_product_lists_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [CurrentProductList]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_current_product_lists_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_current_product_lists_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (CurrentProductList) -> Bool) -> [CurrentProductList]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_and_suppliers_by_cities_fetch(_:sql:orderby:limit:)","title":"func sqlite3_customer_and_suppliers_by_cities_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [CustomerAndSuppliersByCity]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_and_suppliers_by_cities_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_customer_and_suppliers_by_cities_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (CustomerAndSuppliersByCity) -> Bool) -> [CustomerAndSuppliersByCity]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_customer_demo_delete(_:_:)","title":"func sqlite3_customer_customer_demo_delete(OpaquePointer!, CustomerCustomerDemo) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_customer_demo_insert(_:_:)","title":"func sqlite3_customer_customer_demo_insert(OpaquePointer!, inout CustomerCustomerDemo) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_customer_demos_fetch(_:sql:orderby:limit:)","title":"func sqlite3_customer_customer_demos_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [CustomerCustomerDemo]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_customer_demos_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_customer_customer_demos_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (CustomerCustomerDemo) -> Bool) -> [CustomerCustomerDemo]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_delete(_:_:)","title":"func sqlite3_customer_delete(OpaquePointer!, Customer) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_demographic_delete(_:_:)","title":"func sqlite3_customer_demographic_delete(OpaquePointer!, CustomerDemographic) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_demographic_insert(_:_:)","title":"func sqlite3_customer_demographic_insert(OpaquePointer!, inout CustomerDemographic) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_demographic_update(_:_:)","title":"func sqlite3_customer_demographic_update(OpaquePointer!, CustomerDemographic) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_demographics_fetch(_:sql:orderby:limit:)","title":"func sqlite3_customer_demographics_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [CustomerDemographic]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_demographics_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_customer_demographics_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (CustomerDemographic) -> Bool) -> [CustomerDemographic]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_insert(_:_:)","title":"func sqlite3_customer_insert(OpaquePointer!, inout Customer) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customer_update(_:_:)","title":"func sqlite3_customer_update(OpaquePointer!, Customer) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customers_fetch(_:sql:orderby:limit:)","title":"func sqlite3_customers_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [Customer]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_customers_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_customers_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (Customer) -> Bool) -> [Customer]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employee_delete(_:_:)","title":"func sqlite3_employee_delete(OpaquePointer!, Employee) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employee_find(_:for:)-5v6in","title":"func sqlite3_employee_find(OpaquePointer!, for: Order) -> Employee?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employee_find(_:for:)-7ysc6","title":"func sqlite3_employee_find(OpaquePointer!, for: Employee) -> Employee?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employee_find(_:for:)-k86y","title":"func sqlite3_employee_find(OpaquePointer!, for: EmployeeTerritory) -> Employee?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employee_insert(_:_:)","title":"func sqlite3_employee_insert(OpaquePointer!, inout Employee) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employee_territories_fetch(_:for:orderby:limit:)","title":"func sqlite3_employee_territories_fetch(OpaquePointer!, for: Employee, orderBy: String?, limit: Int?) -> [EmployeeTerritory]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employee_territories_fetch(_:sql:orderby:limit:)","title":"func sqlite3_employee_territories_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [EmployeeTerritory]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employee_territories_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_employee_territories_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (EmployeeTerritory) -> Bool) -> [EmployeeTerritory]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employee_territory_delete(_:_:)","title":"func sqlite3_employee_territory_delete(OpaquePointer!, EmployeeTerritory) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employee_territory_insert(_:_:)","title":"func sqlite3_employee_territory_insert(OpaquePointer!, inout EmployeeTerritory) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employee_update(_:_:)","title":"func sqlite3_employee_update(OpaquePointer!, Employee) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employees_fetch(_:for:orderby:limit:)","title":"func sqlite3_employees_fetch(OpaquePointer!, for: Employee, orderBy: String?, limit: Int?) -> [Employee]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employees_fetch(_:sql:orderby:limit:)","title":"func sqlite3_employees_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [Employee]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_employees_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_employees_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (Employee) -> Bool) -> [Employee]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_invoices_fetch(_:sql:orderby:limit:)","title":"func sqlite3_invoices_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [Invoice]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_invoices_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_invoices_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (Invoice) -> Bool) -> [Invoice]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_open_northwind(_:_:_:)","title":"func sqlite3_open_northwind(UnsafePointer<CChar>!, Int32, inout OpaquePointer?) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_delete(_:_:)","title":"func sqlite3_order_delete(OpaquePointer!, Order) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_detail_delete(_:_:)","title":"func sqlite3_order_detail_delete(OpaquePointer!, OrderDetail) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_detail_insert(_:_:)","title":"func sqlite3_order_detail_insert(OpaquePointer!, inout OrderDetail) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_detail_update(_:_:)","title":"func sqlite3_order_detail_update(OpaquePointer!, OrderDetail) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_details_extendeds_fetch(_:sql:orderby:limit:)","title":"func sqlite3_order_details_extendeds_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [OrderDetailsExtended]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_details_extendeds_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_order_details_extendeds_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (OrderDetailsExtended) -> Bool) -> [OrderDetailsExtended]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_details_fetch(_:for:orderby:limit:)-5jjvf","title":"func sqlite3_order_details_fetch(OpaquePointer!, for: Order, orderBy: String?, limit: Int?) -> [OrderDetail]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_details_fetch(_:for:orderby:limit:)-7hihd","title":"func sqlite3_order_details_fetch(OpaquePointer!, for: Product, orderBy: String?, limit: Int?) -> [OrderDetail]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_details_fetch(_:sql:orderby:limit:)","title":"func sqlite3_order_details_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [OrderDetail]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_details_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_order_details_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (OrderDetail) -> Bool) -> [OrderDetail]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_find(_:for:)","title":"func sqlite3_order_find(OpaquePointer!, for: OrderDetail) -> Order?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_find(_:sql:_:)","title":"func sqlite3_order_find(OpaquePointer!, sql: String?, Int) -> Order?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_insert(_:_:)","title":"func sqlite3_order_insert(OpaquePointer!, inout Order) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_subtotals_fetch(_:sql:orderby:limit:)","title":"func sqlite3_order_subtotals_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [OrderSubtotal]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_subtotals_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_order_subtotals_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (OrderSubtotal) -> Bool) -> [OrderSubtotal]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_order_update(_:_:)","title":"func sqlite3_order_update(OpaquePointer!, Order) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_orders_fetch(_:for:orderby:limit:)","title":"func sqlite3_orders_fetch(OpaquePointer!, for: Employee, orderBy: String?, limit: Int?) -> [Order]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_orders_fetch(_:forshipvia:orderby:limit:)","title":"func sqlite3_orders_fetch(OpaquePointer!, forShipVia: Shipper, orderBy: String?, limit: Int?) -> [Order]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_orders_fetch(_:sql:orderby:limit:)","title":"func sqlite3_orders_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [Order]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_orders_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_orders_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (Order) -> Bool) -> [Order]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_orders_qries_fetch(_:sql:orderby:limit:)","title":"func sqlite3_orders_qries_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [OrdersQry]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_orders_qries_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_orders_qries_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (OrdersQry) -> Bool) -> [OrdersQry]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_product_delete(_:_:)","title":"func sqlite3_product_delete(OpaquePointer!, Product) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_product_details_vs_fetch(_:sql:orderby:limit:)","title":"func sqlite3_product_details_vs_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [ProductDetailsV]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_product_details_vs_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_product_details_vs_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (ProductDetailsV) -> Bool) -> [ProductDetailsV]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_product_find(_:for:)","title":"func sqlite3_product_find(OpaquePointer!, for: OrderDetail) -> Product?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_product_find(_:sql:_:)","title":"func sqlite3_product_find(OpaquePointer!, sql: String?, Int) -> Product?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_product_insert(_:_:)","title":"func sqlite3_product_insert(OpaquePointer!, inout Product) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_product_sales_for1997s_fetch(_:sql:orderby:limit:)","title":"func sqlite3_product_sales_for1997s_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [ProductSalesFor1997]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_product_sales_for1997s_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_product_sales_for1997s_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (ProductSalesFor1997) -> Bool) -> [ProductSalesFor1997]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_product_update(_:_:)","title":"func sqlite3_product_update(OpaquePointer!, Product) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_products_above_average_prices_fetch(_:sql:orderby:limit:)","title":"func sqlite3_products_above_average_prices_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [ProductsAboveAveragePrice]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_products_above_average_prices_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_products_above_average_prices_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (ProductsAboveAveragePrice) -> Bool) -> [ProductsAboveAveragePrice]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_products_by_categories_fetch(_:sql:orderby:limit:)","title":"func sqlite3_products_by_categories_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [ProductsByCategory]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_products_by_categories_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_products_by_categories_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (ProductsByCategory) -> Bool) -> [ProductsByCategory]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_products_fetch(_:for:orderby:limit:)-3y0lm","title":"func sqlite3_products_fetch(OpaquePointer!, for: Supplier, orderBy: String?, limit: Int?) -> [Product]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_products_fetch(_:for:orderby:limit:)-6xxxm","title":"func sqlite3_products_fetch(OpaquePointer!, for: Category, orderBy: String?, limit: Int?) -> [Product]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_products_fetch(_:sql:orderby:limit:)","title":"func sqlite3_products_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [Product]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_products_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_products_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (Product) -> Bool) -> [Product]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_quarterly_orders_fetch(_:sql:orderby:limit:)","title":"func sqlite3_quarterly_orders_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [QuarterlyOrder]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_quarterly_orders_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_quarterly_orders_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (QuarterlyOrder) -> Bool) -> [QuarterlyOrder]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_region_delete(_:_:)","title":"func sqlite3_region_delete(OpaquePointer!, Region) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_region_find(_:for:)","title":"func sqlite3_region_find(OpaquePointer!, for: Territory) -> Region?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_region_find(_:sql:_:)","title":"func sqlite3_region_find(OpaquePointer!, sql: String?, Int) -> Region?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_region_insert(_:_:)","title":"func sqlite3_region_insert(OpaquePointer!, inout Region) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_region_update(_:_:)","title":"func sqlite3_region_update(OpaquePointer!, Region) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_regions_fetch(_:sql:orderby:limit:)","title":"func sqlite3_regions_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [Region]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_regions_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_regions_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (Region) -> Bool) -> [Region]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_sales_by_categories_fetch(_:sql:orderby:limit:)","title":"func sqlite3_sales_by_categories_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [SalesByCategory]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_sales_by_categories_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_sales_by_categories_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (SalesByCategory) -> Bool) -> [SalesByCategory]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_sales_totals_by_amounts_fetch(_:sql:orderby:limit:)","title":"func sqlite3_sales_totals_by_amounts_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [SalesTotalsByAmount]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_sales_totals_by_amounts_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_sales_totals_by_amounts_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (SalesTotalsByAmount) -> Bool) -> [SalesTotalsByAmount]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_shipper_delete(_:_:)","title":"func sqlite3_shipper_delete(OpaquePointer!, Shipper) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_shipper_find(_:for:)","title":"func sqlite3_shipper_find(OpaquePointer!, for: Order) -> Shipper?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_shipper_find(_:sql:_:)","title":"func sqlite3_shipper_find(OpaquePointer!, sql: String?, Int) -> Shipper?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_shipper_insert(_:_:)","title":"func sqlite3_shipper_insert(OpaquePointer!, inout Shipper) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_shipper_update(_:_:)","title":"func sqlite3_shipper_update(OpaquePointer!, Shipper) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_shippers_fetch(_:sql:orderby:limit:)","title":"func sqlite3_shippers_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [Shipper]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_shippers_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_shippers_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (Shipper) -> Bool) -> [Shipper]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_summary_of_sales_by_quarters_fetch(_:sql:orderby:limit:)","title":"func sqlite3_summary_of_sales_by_quarters_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [SummaryOfSalesByQuarter]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_summary_of_sales_by_quarters_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_summary_of_sales_by_quarters_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (SummaryOfSalesByQuarter) -> Bool) -> [SummaryOfSalesByQuarter]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_summary_of_sales_by_years_fetch(_:sql:orderby:limit:)","title":"func sqlite3_summary_of_sales_by_years_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [SummaryOfSalesByYear]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_summary_of_sales_by_years_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_summary_of_sales_by_years_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (SummaryOfSalesByYear) -> Bool) -> [SummaryOfSalesByYear]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_supplier_delete(_:_:)","title":"func sqlite3_supplier_delete(OpaquePointer!, Supplier) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_supplier_find(_:for:)","title":"func sqlite3_supplier_find(OpaquePointer!, for: Product) -> Supplier?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_supplier_find(_:sql:_:)","title":"func sqlite3_supplier_find(OpaquePointer!, sql: String?, Int) -> Supplier?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_supplier_insert(_:_:)","title":"func sqlite3_supplier_insert(OpaquePointer!, inout Supplier) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_supplier_update(_:_:)","title":"func sqlite3_supplier_update(OpaquePointer!, Supplier) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_suppliers_fetch(_:sql:orderby:limit:)","title":"func sqlite3_suppliers_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [Supplier]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_suppliers_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_suppliers_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (Supplier) -> Bool) -> [Supplier]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_territories_fetch(_:for:orderby:limit:)","title":"func sqlite3_territories_fetch(OpaquePointer!, for: Region, orderBy: String?, limit: Int?) -> [Territory]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_territories_fetch(_:sql:orderby:limit:)","title":"func sqlite3_territories_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?) -> [Territory]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_territories_fetch(_:sql:orderby:limit:filter:)","title":"func sqlite3_territories_fetch(OpaquePointer!, sql: String?, orderBy: String?, limit: Int?, filter: (Territory) -> Bool) -> [Territory]?","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_territory_delete(_:_:)","title":"func sqlite3_territory_delete(OpaquePointer!, Territory) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_territory_insert(_:_:)","title":"func sqlite3_territory_insert(OpaquePointer!, inout Territory) -> Int32","type":"func"},{"path":"\/documentation\/northwind\/sqlite3_territory_update(_:_:)","title":"func sqlite3_territory_update(OpaquePointer!, Territory) -> Int32","type":"func"}],"path":"\/documentation\/northwind","title":"Northwind","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}